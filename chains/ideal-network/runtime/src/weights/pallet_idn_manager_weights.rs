/*
 * Copyright 2025 by Ideal Labs, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! Autogenerated weights for `pallet_idn_manager`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-27, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/release/wbuild/idn-runtime/idn_runtime.wasm
// --pallet=pallet_idn_manager
// --header=/Users/juan/Projects/IdealLabs/idn-sdk/scripts/file_header.txt
// --output=./chains/ideal-network/runtime/src/weights/pallet_idn_manager_weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_idn_manager`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_idn_manager::WeightInfo for WeightInfo<T> {
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	fn create_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `4225`
		// Minimum execution time: 85_000_000 picoseconds.
		Weight::from_parts(94_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	fn pause_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243`
		//  Estimated: `4225`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn kill_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `4225`
		// Minimum execution time: 73_000_000 picoseconds.
		Weight::from_parts(75_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// The range of component `m` is `[0, 8]`.
	fn update_subscription(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `4225`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(54_165_523, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			// Standard Error: 13_412
			.saturating_add(Weight::from_parts(72_862, 0).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	fn reactivate_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243`
		//  Estimated: `4225`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn quote_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(9_000_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:0)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	fn get_subscription_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `243`
		//  Estimated: `4225`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(15_000_000, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `IdnManager::Subscriptions` (r:2001 w:2000)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2000 w:2000)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:2000 w:2000)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 2000]`.
	fn dispatch_pulse(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `370 + s * (385 ±0)`
		//  Estimated: `4225 + s * (3235 ±0)`
		// Minimum execution time: 82_000_000 picoseconds.
		Weight::from_parts(3_694_335_665, 0)
			.saturating_add(Weight::from_parts(0, 4225))
			// Standard Error: 483_118
			.saturating_add(Weight::from_parts(51_895_250, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((3_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes((3_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 3235).saturating_mul(s.into()))
	}
	/// Storage: `IdnManager::Subscriptions` (r:201 w:200)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(760), added: 3235, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:200 w:200)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:200 w:200)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(103), added: 2578, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `141542`
		//  Estimated: `651225`
		// Minimum execution time: 14_550_000_000 picoseconds.
		Weight::from_parts(14_683_000_000, 0)
			.saturating_add(Weight::from_parts(0, 651225))
			.saturating_add(T::DbWeight::get().reads(602))
			.saturating_add(T::DbWeight::get().writes(601))
	}
}
