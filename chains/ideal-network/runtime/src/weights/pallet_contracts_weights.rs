/*
 * Copyright 2025 by Ideal Labs, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! Autogenerated weights for `pallet_contracts`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `idn-collator-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/release/wbuild/idn-runtime/idn_runtime.wasm
// --pallet=pallet_contracts
// --header=/mnt/disks/ssd/code/idn-sdk/scripts/file_header.txt
// --output=./chains/ideal-network/runtime/src/weights/pallet_contracts_weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_contracts`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_contracts::WeightInfo for WeightInfo<T> {
	/// Storage: `Contracts::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Contracts::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1527`
		// Minimum execution time: 3_458_000 picoseconds.
		Weight::from_parts(3_643_000, 0)
			.saturating_add(Weight::from_parts(0, 1527))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `357 + k * (69 ±0)`
		//  Estimated: `347 + k * (70 ±0)`
		// Minimum execution time: 22_250_000 picoseconds.
		Weight::from_parts(22_945_000, 0)
			.saturating_add(Weight::from_parts(0, 347))
			// Standard Error: 2_878
			.saturating_add(Weight::from_parts(1_873_496, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(k.into())))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 70).saturating_mul(k.into()))
	}
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc553022fca90611ba8b7942f8bdb3b97f6580` (r:2 w:1)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc553022fca90611ba8b7942f8bdb3b97f6580` (r:2 w:1)
	/// The range of component `c` is `[0, 125952]`.
	fn v9_migration_step(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111 + c * (1 ±0)`
		//  Estimated: `6049 + c * (1 ±0)`
		// Minimum execution time: 13_107_000 picoseconds.
		Weight::from_parts(13_255_000, 0)
			.saturating_add(Weight::from_parts(0, 6049))
			// Standard Error: 7
			.saturating_add(Weight::from_parts(2_701, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:2 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn v10_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `411`
		//  Estimated: `6351`
		// Minimum execution time: 26_159_000 picoseconds.
		Weight::from_parts(27_353_000, 0)
			.saturating_add(Weight::from_parts(0, 6351))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::DeletionQueue` (r:1 w:1025)
	/// Proof: `Contracts::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Contracts::DeletionQueueCounter` (r:0 w:1)
	/// Proof: `Contracts::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn v11_migration_step(k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `71 + k * (1 ±0)`
		//  Estimated: `3535 + k * (1 ±0)`
		// Minimum execution time: 6_236_000 picoseconds.
		Weight::from_parts(197_666, 0)
			.saturating_add(Weight::from_parts(0, 3535))
			// Standard Error: 1_589
			.saturating_add(Weight::from_parts(1_726_664, 0).saturating_mul(k.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(k.into())))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(k.into()))
	}
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc553053f13fd319a03c211337c76e0fe776df` (r:2 w:0)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc553053f13fd319a03c211337c76e0fe776df` (r:2 w:0)
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc553022fca90611ba8b7942f8bdb3b97f6580` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc553022fca90611ba8b7942f8bdb3b97f6580` (r:1 w:1)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:0 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// The range of component `c` is `[0, 125952]`.
	fn v12_migration_step(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `225 + c * (1 ±0)`
		//  Estimated: `6163 + c * (1 ±0)`
		// Minimum execution time: 25_680_000 picoseconds.
		Weight::from_parts(12_810_589, 0)
			.saturating_add(Weight::from_parts(0, 6163))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(1_204, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:2 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	fn v13_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `340`
		//  Estimated: `6280`
		// Minimum execution time: 19_302_000 picoseconds.
		Weight::from_parts(20_386_000, 0)
			.saturating_add(Weight::from_parts(0, 6280))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::CodeInfoOf` (r:2 w:0)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:0)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `Measured`)
	fn v14_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `252`
		//  Estimated: `6192`
		// Minimum execution time: 92_334_000 picoseconds.
		Weight::from_parts(93_728_000, 0)
			.saturating_add(Weight::from_parts(0, 6192))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:2 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn v15_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `6435`
		// Minimum execution time: 88_654_000 picoseconds.
		Weight::from_parts(93_346_000, 0)
			.saturating_add(Weight::from_parts(0, 6435))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:2 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	fn v16_migration_step() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `309`
		//  Estimated: `6249`
		// Minimum execution time: 19_223_000 picoseconds.
		Weight::from_parts(20_053_000, 0)
			.saturating_add(Weight::from_parts(0, 6249))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:1)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	fn migration_noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `1527`
		// Minimum execution time: 3_995_000 picoseconds.
		Weight::from_parts(4_177_000, 0)
			.saturating_add(Weight::from_parts(0, 1527))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:1)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:1)
	fn migrate() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `66`
		//  Estimated: `3531`
		// Minimum execution time: 28_134_000 picoseconds.
		Weight::from_parts(29_225_000, 0)
			.saturating_add(Weight::from_parts(0, 3531))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	fn on_runtime_upgrade_noop() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 13_434_000 picoseconds.
		Weight::from_parts(13_936_000, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	fn on_runtime_upgrade_in_progress() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `3532`
		// Minimum execution time: 16_004_000 picoseconds.
		Weight::from_parts(16_877_000, 0)
			.saturating_add(Weight::from_parts(0, 3532))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	/// Proof: UNKNOWN KEY `0x4342193e496fab7ec59d615ed0dc55304e7b9012096b41c4eb3aaf947f6ea429` (r:1 w:0)
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:1)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	fn on_runtime_upgrade() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 16_442_000 picoseconds.
		Weight::from_parts(16_764_000, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:0)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 125952]`.
	fn call_with_code_per_byte(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `601 + c * (1 ±0)`
		//  Estimated: `4064 + c * (1 ±0)`
		// Minimum execution time: 358_173_000 picoseconds.
		Weight::from_parts(360_968_004, 0)
			.saturating_add(Weight::from_parts(0, 4064))
			// Standard Error: 22
			.saturating_add(Weight::from_parts(2_569, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(c.into()))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `Measured`)
	/// Storage: `Contracts::Nonce` (r:1 w:1)
	/// Proof: `Contracts::Nonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:0 w:1)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// The range of component `c` is `[0, 125952]`.
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate_with_code(c: u32, i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `123`
		//  Estimated: `6062`
		// Minimum execution time: 19_669_837_000 picoseconds.
		Weight::from_parts(3_678_941_663, 0)
			.saturating_add(Weight::from_parts(0, 6062))
			// Standard Error: 1_491
			.saturating_add(Weight::from_parts(67_041, 0).saturating_mul(c.into()))
			// Standard Error: 179
			.saturating_add(Weight::from_parts(8_957, 0).saturating_mul(i.into()))
			// Standard Error: 179
			.saturating_add(Weight::from_parts(8_337, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// Storage: `Contracts::Nonce` (r:1 w:1)
	/// Proof: `Contracts::Nonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `Measured`)
	/// The range of component `i` is `[0, 1048576]`.
	/// The range of component `s` is `[0, 1048576]`.
	fn instantiate(i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `360`
		//  Estimated: `3829`
		// Minimum execution time: 12_245_736_000 picoseconds.
		Weight::from_parts(3_951_713_014, 0)
			.saturating_add(Weight::from_parts(0, 3829))
			// Standard Error: 148
			.saturating_add(Weight::from_parts(8_076, 0).saturating_mul(i.into()))
			// Standard Error: 148
			.saturating_add(Weight::from_parts(7_297, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:0)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `627`
		//  Estimated: `4092`
		// Minimum execution time: 265_567_000 picoseconds.
		Weight::from_parts(276_637_000, 0)
			.saturating_add(Weight::from_parts(0, 4092))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:0 w:1)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// The range of component `c` is `[0, 125952]`.
	fn upload_code_determinism_enforced(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 332_052_000 picoseconds.
		Weight::from_parts(291_414_010, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			// Standard Error: 153
			.saturating_add(Weight::from_parts(70_901, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:0 w:1)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// The range of component `c` is `[0, 125952]`.
	fn upload_code_determinism_relaxed(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `3507`
		// Minimum execution time: 350_980_000 picoseconds.
		Weight::from_parts(284_814_034, 0)
			.saturating_add(Weight::from_parts(0, 3507))
			// Standard Error: 94
			.saturating_add(Weight::from_parts(72_531, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(139), added: 2614, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:0 w:1)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `3677`
		// Minimum execution time: 68_062_000 picoseconds.
		Weight::from_parts(69_134_000, 0)
			.saturating_add(Weight::from_parts(0, 3677))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Contracts::MigrationInProgress` (r:1 w:0)
	/// Proof: `Contracts::MigrationInProgress` (`max_values`: Some(1), `max_size`: Some(1026), added: 1521, mode: `Measured`)
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:2 w:2)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `452`
		//  Estimated: `6392`
		// Minimum execution time: 40_415_000 picoseconds.
		Weight::from_parts(41_255_000, 0)
			.saturating_add(Weight::from_parts(0, 6392))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_234_000 picoseconds.
		Weight::from_parts(15_932_993, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 149
			.saturating_add(Weight::from_parts(66_374, 0).saturating_mul(r.into()))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_073_000 picoseconds.
		Weight::from_parts(1_178_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:0)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	fn seal_is_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `254`
		//  Estimated: `3719`
		// Minimum execution time: 11_705_000 picoseconds.
		Weight::from_parts(11_884_000, 0)
			.saturating_add(Weight::from_parts(0, 3719))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:0)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `347`
		//  Estimated: `3812`
		// Minimum execution time: 14_021_000 picoseconds.
		Weight::from_parts(14_348_000, 0)
			.saturating_add(Weight::from_parts(0, 3812))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_383_000 picoseconds.
		Weight::from_parts(1_437_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 617_000 picoseconds.
		Weight::from_parts(656_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 543_000 picoseconds.
		Weight::from_parts(585_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_066_000 picoseconds.
		Weight::from_parts(1_126_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_gas_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_316_000 picoseconds.
		Weight::from_parts(1_438_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `0`
		// Minimum execution time: 8_960_000 picoseconds.
		Weight::from_parts(9_344_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_080_000 picoseconds.
		Weight::from_parts(1_133_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_119_000 picoseconds.
		Weight::from_parts(1_185_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_061_000 picoseconds.
		Weight::from_parts(1_125_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_028_000 picoseconds.
		Weight::from_parts(1_078_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_529_000 picoseconds.
		Weight::from_parts(3_887_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 1048572]`.
	fn seal_input(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 791_000 picoseconds.
		Weight::from_parts(1_026_791, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(151, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048572]`.
	fn seal_return(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 530_000 picoseconds.
		Weight::from_parts(552_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(235, 0).saturating_mul(n.into()))
	}
	/// Storage: `Contracts::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Contracts::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:33 w:33)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::DeletionQueue` (r:0 w:1)
	/// Proof: `Contracts::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// The range of component `n` is `[0, 32]`.
	fn seal_terminate(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `219 + n * (78 ±0)`
		//  Estimated: `3684 + n * (2553 ±0)`
		// Minimum execution time: 24_436_000 picoseconds.
		Weight::from_parts(28_374_947, 0)
			.saturating_add(Weight::from_parts(0, 3684))
			// Standard Error: 15_448
			.saturating_add(Weight::from_parts(5_643_753, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(n.into())))
			.saturating_add(T::DbWeight::get().writes(3))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(n.into())))
			.saturating_add(Weight::from_parts(0, 2553).saturating_mul(n.into()))
	}
	/// Storage: `RandBeacon::SparseAccumulation` (r:1 w:0)
	/// Proof: `RandBeacon::SparseAccumulation` (`max_values`: Some(1), `max_size`: Some(64), added: 559, mode: `Measured`)
	/// Storage: `RandomnessCollectiveFlip::RandomMaterial` (r:1 w:0)
	/// Proof: `RandomnessCollectiveFlip::RandomMaterial` (`max_values`: Some(1), `max_size`: Some(2594), added: 3089, mode: `Measured`)
	fn seal_random() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `48`
		//  Estimated: `1533`
		// Minimum execution time: 26_605_000 picoseconds.
		Weight::from_parts(28_723_000, 0)
			.saturating_add(Weight::from_parts(0, 1533))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `System::EventTopics` (r:4 w:4)
	/// Proof: `System::EventTopics` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 16384]`.
	fn seal_deposit_event(t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `990 + t * (2475 ±0)`
		// Minimum execution time: 6_854_000 picoseconds.
		Weight::from_parts(7_141_384, 0)
			.saturating_add(Weight::from_parts(0, 990))
			// Standard Error: 18_385
			.saturating_add(Weight::from_parts(3_465_349, 0).saturating_mul(t.into()))
			// Standard Error: 5
			.saturating_add(Weight::from_parts(53, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2475).saturating_mul(t.into()))
	}
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_debug_message(i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 719_000 picoseconds.
		Weight::from_parts(779_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(1_196, 0).saturating_mul(i.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16623`
		//  Estimated: `16623`
		// Minimum execution time: 22_964_000 picoseconds.
		Weight::from_parts(23_689_000, 0)
			.saturating_add(Weight::from_parts(0, 16623))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `26633`
		//  Estimated: `26633`
		// Minimum execution time: 74_214_000 picoseconds.
		Weight::from_parts(80_520_000, 0)
			.saturating_add(Weight::from_parts(0, 26633))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `16623`
		//  Estimated: `16623`
		// Minimum execution time: 26_179_000 picoseconds.
		Weight::from_parts(26_637_000, 0)
			.saturating_add(Weight::from_parts(0, 16623))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `26633`
		//  Estimated: `26633`
		// Minimum execution time: 74_392_000 picoseconds.
		Weight::from_parts(87_291_000, 0)
			.saturating_add(Weight::from_parts(0, 26633))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 16384]`.
	/// The range of component `o` is `[0, 16384]`.
	fn seal_set_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255 + o * (1 ±0)`
		//  Estimated: `254 + o * (1 ±0)`
		// Minimum execution time: 18_807_000 picoseconds.
		Weight::from_parts(17_138_903, 0)
			.saturating_add(Weight::from_parts(0, 254))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(275, 0).saturating_mul(n.into()))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(172, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_clear_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `253 + n * (1 ±0)`
		// Minimum execution time: 14_347_000 picoseconds.
		Weight::from_parts(15_447_391, 0)
			.saturating_add(Weight::from_parts(0, 253))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(198, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_get_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `253 + n * (1 ±0)`
		// Minimum execution time: 13_448_000 picoseconds.
		Weight::from_parts(15_107_605, 0)
			.saturating_add(Weight::from_parts(0, 253))
			// Standard Error: 4
			.saturating_add(Weight::from_parts(781, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_contains_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `253 + n * (1 ±0)`
		// Minimum execution time: 12_895_000 picoseconds.
		Weight::from_parts(13_867_317, 0)
			.saturating_add(Weight::from_parts(0, 253))
			// Standard Error: 3
			.saturating_add(Weight::from_parts(205, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 16384]`.
	fn seal_take_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `253 + n * (1 ±0)`
		//  Estimated: `253 + n * (1 ±0)`
		// Minimum execution time: 15_133_000 picoseconds.
		Weight::from_parts(17_135_771, 0)
			.saturating_add(Weight::from_parts(0, 253))
			// Standard Error: 8
			.saturating_add(Weight::from_parts(784, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(n.into()))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_571_000 picoseconds.
		Weight::from_parts(2_695_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_802_000 picoseconds.
		Weight::from_parts(5_591_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 5_027_000 picoseconds.
		Weight::from_parts(5_148_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_886_000 picoseconds.
		Weight::from_parts(8_048_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_360_000 picoseconds.
		Weight::from_parts(3_789_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 16384]`.
	/// The range of component `o` is `[0, 16384]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_600_000 picoseconds.
		Weight::from_parts(4_123_315, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(244, 0).saturating_mul(n.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(321, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 16384]`.
	fn seal_clear_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_597_000 picoseconds.
		Weight::from_parts(4_227_901, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(319, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 16384]`.
	fn seal_get_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_406_000 picoseconds.
		Weight::from_parts(3_736_908, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(314, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 16384]`.
	fn seal_contains_transient_storage(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_287_000 picoseconds.
		Weight::from_parts(3_470_923, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(158, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 16384]`.
	fn seal_take_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 11_702_000 picoseconds.
		Weight::from_parts(12_150_755, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `140`
		//  Estimated: `0`
		// Minimum execution time: 15_676_000 picoseconds.
		Weight::from_parts(15_988_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:0)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 1048576]`.
	fn seal_call(t: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `520 + t * (280 ±0)`
		//  Estimated: `3985 + t * (2133 ±0)`
		// Minimum execution time: 193_293_000 picoseconds.
		Weight::from_parts(198_291_953, 0)
			.saturating_add(Weight::from_parts(0, 3985))
			// Standard Error: 509_521
			.saturating_add(Weight::from_parts(65_994_085, 0).saturating_mul(t.into()))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(1, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(t.into())))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(t.into())))
			.saturating_add(Weight::from_parts(0, 2133).saturating_mul(t.into()))
	}
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:0)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `330`
		//  Estimated: `3795`
		// Minimum execution time: 178_010_000 picoseconds.
		Weight::from_parts(179_631_000, 0)
			.saturating_add(Weight::from_parts(0, 3795))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	/// Storage: `Contracts::Nonce` (r:1 w:0)
	/// Proof: `Contracts::Nonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Contracts::ContractInfoOf` (r:1 w:1)
	/// Proof: `Contracts::ContractInfoOf` (`max_values`: None, `max_size`: Some(1795), added: 4270, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `i` is `[0, 983040]`.
	/// The range of component `s` is `[0, 983040]`.
	fn seal_instantiate(i: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `576`
		//  Estimated: `4027`
		// Minimum execution time: 2_229_701_000 picoseconds.
		Weight::from_parts(2_265_259_000, 0)
			.saturating_add(Weight::from_parts(0, 4027))
			// Standard Error: 30
			.saturating_add(Weight::from_parts(840, 0).saturating_mul(i.into()))
			// Standard Error: 30
			.saturating_add(Weight::from_parts(1_179, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_sha2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_980_000 picoseconds.
		Weight::from_parts(5_465_142, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 5
			.saturating_add(Weight::from_parts(5_538, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_keccak_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_028_000 picoseconds.
		Weight::from_parts(2_081_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 2
			.saturating_add(Weight::from_parts(4_532, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_256(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_142_000 picoseconds.
		Weight::from_parts(16_336_111, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_603, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 1048576]`.
	fn seal_hash_blake2_128(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_206_000 picoseconds.
		Weight::from_parts(7_602_215, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_625, 0).saturating_mul(n.into()))
	}
	/// The range of component `n` is `[0, 125697]`.
	fn seal_sr25519_verify(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 71_425_000 picoseconds.
		Weight::from_parts(71_272_804, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 11
			.saturating_add(Weight::from_parts(5_623, 0).saturating_mul(n.into()))
	}
	fn seal_ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 53_406_000 picoseconds.
		Weight::from_parts(57_484_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 14_668_000 picoseconds.
		Weight::from_parts(15_022_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	/// Storage: `Contracts::PristineCode` (r:1 w:0)
	/// Proof: `Contracts::PristineCode` (`max_values`: None, `max_size`: Some(125988), added: 128463, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `330`
		//  Estimated: `3795`
		// Minimum execution time: 31_806_000 picoseconds.
		Weight::from_parts(32_414_000, 0)
			.saturating_add(Weight::from_parts(0, 3795))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `Measured`)
	fn lock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3720`
		// Minimum execution time: 15_171_000 picoseconds.
		Weight::from_parts(15_678_000, 0)
			.saturating_add(Weight::from_parts(0, 3720))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Contracts::CodeInfoOf` (r:1 w:1)
	/// Proof: `Contracts::CodeInfoOf` (`max_values`: None, `max_size`: Some(93), added: 2568, mode: `MaxEncodedLen`)
	fn unlock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `255`
		//  Estimated: `3558`
		// Minimum execution time: 13_519_000 picoseconds.
		Weight::from_parts(13_809_000, 0)
			.saturating_add(Weight::from_parts(0, 3558))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn seal_reentrance_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 575_000 picoseconds.
		Weight::from_parts(611_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_account_reentrance_count() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 528_000 picoseconds.
		Weight::from_parts(575_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Contracts::Nonce` (r:1 w:0)
	/// Proof: `Contracts::Nonce` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn seal_instantiation_nonce() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119`
		//  Estimated: `1604`
		// Minimum execution time: 5_311_000 picoseconds.
		Weight::from_parts(5_496_000, 0)
			.saturating_add(Weight::from_parts(0, 1604))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr_i64_load_store(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_546_000 picoseconds.
		Weight::from_parts(1_342_053, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 99
			.saturating_add(Weight::from_parts(12_283, 0).saturating_mul(r.into()))
	}
}
