/*
 * Copyright 2025 by Ideal Labs, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! Autogenerated weights for `pallet_randomness_beacon`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 51.0.0
//! DATE: 2025-10-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `idn-collator-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/release/wbuild/idn-runtime/idn_runtime.wasm
// --pallet=pallet_randomness_beacon
// --header=/mnt/disks/ssd/idn/idn-sdk/scripts/file_header.txt
// --output=./chains/ideal-network/runtime/src/weights/pallet_randomness_beacon_weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_randomness_beacon`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_randomness_beacon::WeightInfo for WeightInfo<T> {
	/// Storage: `Aura::Authorities` (r:1 w:0)
	/// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	/// Storage: `Session::Validators` (r:1 w:0)
	/// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `RandBeacon::DidUpdate` (r:1 w:1)
	/// Proof: `RandBeacon::DidUpdate` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::BeaconConfig` (r:1 w:0)
	/// Proof: `RandBeacon::BeaconConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::NextRound` (r:1 w:1)
	/// Proof: `RandBeacon::NextRound` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::Subscriptions` (r:1 w:0)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(1017), added: 3492, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::SparseAccumulation` (r:0 w:1)
	/// Proof: `RandBeacon::SparseAccumulation` (`max_values`: Some(1), `max_size`: Some(64), added: 559, mode: `MaxEncodedLen`)
	/// The range of component `r` is `[1, 6]`.
	fn try_submit_asig(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `446`
		//  Estimated: `3201489`
		// Minimum execution time: 16_257_726_000 picoseconds.
		Weight::from_parts(14_446_358_391, 0)
			.saturating_add(Weight::from_parts(0, 3201489))
			// Standard Error: 1_068_920
			.saturating_add(Weight::from_parts(1_954_836_013, 0).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `RandBeacon::DidUpdate` (r:1 w:1)
	/// Proof: `RandBeacon::DidUpdate` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::BeaconConfig` (r:1 w:0)
	/// Proof: `RandBeacon::BeaconConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `29`
		//  Estimated: `1581`
		// Minimum execution time: 6_103_000 picoseconds.
		Weight::from_parts(6_228_000, 0)
			.saturating_add(Weight::from_parts(0, 1581))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `RandBeacon::BeaconConfig` (r:0 w:1)
	/// Proof: `RandBeacon::BeaconConfig` (`max_values`: Some(1), `max_size`: Some(96), added: 591, mode: `MaxEncodedLen`)
	fn set_beacon_config() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_005_000 picoseconds.
		Weight::from_parts(10_592_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
