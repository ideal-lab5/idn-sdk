Description: Economic Test
Network: ./zombienet.toml
Creds: config

# Ensure Nodes and Collators are running
alice: is up
bob: is up
idn-alice: is up
idn-bob: is up
idn-consumer-alice: is up
idn-consumer-bob: is up

# Force open HRMP work around due to bug https://www.github.com/paritytech/polkadot-sdk/pull/1616#issuecomment-1727194584 
#alice: ts-script ./typescript/testing-file.ts return is equal to 2 within 120 seconds
idn-alice: js-script ../../scripts/setup/set-drand-pubkey.js within 120 seconds
alice: run ../../scripts/setup/open_hrmp.sh within 120 seconds

# Ensure Blocks are being produced, also give enough time to allow for HRMP channels to open
alice: parachain 2001 block height is at least 10 within 6000 seconds
alice: parachain 4502 block height is at least 10 within 6000 seconds

# Fund Sovereign Account
idn-alice: js-script ../../scripts/setup/balance-transfer.js with "5Eg2fntJDju46yds4uKzu2zuQssqw7JZWohhLMj6mZZjg2pK,1000000" within 120 seconds
# Pause to allow next transaction to go through
sleep 7 seconds


###############################################################
# Test #1: "One-Off subscription" (frequency = 0, #pulses = 1)
# expected credits: 1
# expected fees: 900_000
# expected deposit: 1020
# expected subscription duration: 1 block = 6 secs
###############################################################
# SETUP
########################################################
# set the treasury balance to existential deposit (1_000_000)
idn-alice: js-script ../../scripts/testing/utils/reset-balance.js with "5CQE1RtAnMdcdWgx4EuvnGYfdPa5qwQS2pQMzhjsPn7k3A1C" within 120 secs
########################################################
## Quote Subscription (frequency = 0, # pulses = 1) 
########################################################
idn-consumer-alice: js-script ../../scripts/testing/subscriptions/dyn-quote-subscription.js with "0,1" within 120 seconds
idn-alice: system event contains "Subscription Fees quoted" within 120 seconds
idn-consumer-alice: system event contains "A subscription quote was successfully consumed" within 120 seconds
# freq = 0, #pulses = 1 => 1 credits => 2_900_000 
idn-consumer-alice: log line contains "IDN Consumer: Consuming quote: Quote { req_ref: \[.*\], fees: 2900000, deposit: 1020 }" within 120 seconds
###############################################################################
## Create Subscription (frequency = 0, # pulses = 1) => expect 900_000 in fees 
###############################################################################
#idn-consumer-alice: js-script ../../scripts/testing/subscriptions/create-subscription.js with "0xd8ff4f4f356b223c36a3ce7659c2173bcf52ad8e9981924190bb31d9d1614c39" within 120 seconds
idn-consumer-alice: js-script ../../scripts/testing/subscriptions/dyn-create-subscription.js with "0,1" within 120 seconds
idn-alice: system event contains "A new subscription was created" within 120 seconds
idn-alice: system event contains "Fees collected" within 120 seconds
# the subscription only gets 1 pulse
#idn-alice: system event contains "Randomness was successfully distributed" within 120 seconds
#idn-consumer-alice: system event contains "A randomness pulse was successfully consumed" within 120 seconds
# 1 credits => 1 blocks => 6 secs
idn-alice: system event contains "A subscription has terminated" within 12 seconds
# now we want to check the balance of the treasury account is 10_000_000_001 + 2_900_000 = 10_002_900_001
idn-alice: js-script ../../scripts/testing/utils/check-balance.js with "5CQE1RtAnMdcdWgx4EuvnGYfdPa5qwQS2pQMzhjsPn7k3A1C, 10002900001" within 120 secs

#####################################################
# Test #2: (frequency = 0, #pulses = 10)
# expected credits: 10
# expected fees: 9_000_000
# expected deposit: 1020
# expected duration: 10 *(0 (waiting) + 1 (dispatch)) = 10 blocks = 60 secs
######################################################
# SETUP
########################################################
# set the treasury balance to existential deposit (1_000_000)
idn-alice: js-script ../../scripts/testing/utils/reset-balance.js with "5CQE1RtAnMdcdWgx4EuvnGYfdPa5qwQS2pQMzhjsPn7k3A1C" within 120 secs
########################################################
## Quote Subscription (frequency = 0, # pulses = 10) 
########################################################
idn-consumer-alice: js-script ../../scripts/testing/subscriptions/dyn-quote-subscription.js with "0,10" within 120 seconds
idn-alice: system event contains "Subscription Fees quoted" within 120 seconds
idn-consumer-alice: system event contains "A subscription quote was successfully consumed" within 120 seconds
# freq = 0, #pulses = 10 => 10 credits => 9_000_000 fee 
idn-consumer-alice: log line contains "IDN Consumer: Consuming quote: Quote { req_ref: \[.*\], fees: 29000000, deposit: 1020 }" within 120 seconds
###############################################################################
## Create Subscription (frequency = 0, # pulses = 10) => expect 9_000_000 in fees 
###############################################################################
#idn-consumer-alice: js-script ../../scripts/testing/subscriptions/create-subscription.js with "0xd8ff4f4f356b223c36a3ce7659c2173bcf52ad8e9981924190bb31d9d1614c39" within 120 seconds
idn-consumer-alice: js-script ../../scripts/testing/subscriptions/dyn-create-subscription.js with "0,10" within 120 seconds
idn-alice: system event contains "A new subscription was created" within 120 seconds
idn-alice: system event contains "Fees collected" within 120 seconds
# the subscription receives one pulse
idn-alice: system event contains "Randomness was successfully distributed" within 120 seconds
idn-consumer-alice: system event contains "A randomness pulse was successfully consumed" within 120 seconds
# 10 credits => 10 blocks => 60 secs
sleep 120 secs
# now we want to check the balance of the treasury account
# 10_000_000_001 + 29_000_000 = 10_029_000_001
idn-alice: js-script ../../scripts/testing/utils/check-balance.js with "5CQE1RtAnMdcdWgx4EuvnGYfdPa5qwQS2pQMzhjsPn7k3A1C, 10029000001" within 120 secs

# additional test parameters for longer tests if desired
#####################################################
# Test #3: (frequency = 1, #pulses = 10)
# expected credits: 20
# expected fees: 18_000_000
# expected deposit: 1020
# expected duration: 10 *(1 (waiting) + 1 (dispatch)) = 20 blocks = 120 secs
######################################################

#####################################################
# Test #4: (frequency = 0, #pulses = 100)
# expected credits: 20
# expected fees: 18_000_000
# expected deposit: 1020

# expected duration: 10 *(1 (waiting) + 1 (dispatch)) = 20 blocks = 120 secs
######################################################

#####################################################
# Test #4: (frequency = 1, #pulses = 150)
# expected credits: 300
# expected fees: 270_000_00
# expected deposit: 1020
# expected duration: 150 *(1 (waiting) + 1 (dispatch)) = 300 blocks = 1800 secs = 30 mins
######################################################
