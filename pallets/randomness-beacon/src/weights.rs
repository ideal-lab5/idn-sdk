/*
 * Copyright 2025 by Ideal Labs, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

//! Autogenerated weights for `pallet_timelock_transactions`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 50.0.0
//! DATE: 2025-09-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `idn-collator-0`, CPU: `Intel(R) Xeon(R) CPU @ 2.80GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --extrinsic=*
// --runtime=target/release/wbuild/idn-runtime/idn_runtime.wasm
// --pallet=pallet_timelock_transactions
// --header=/mnt/disks/ssd/code/idn-sdk/scripts/file_header.txt
// --output=./chains/ideal-network/runtime/src/weights/pallet_timelock_transactions_weights.rs
// --wasm-execution=compiled
// --steps=50
// --repeat=20
// --heap-pages=4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weights for `pallet_randomness_beacon` using the IDN SDK Kitchensink Runtime and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Timelock::Agenda` (r:1 w:1)
	/// Proof: `Timelock::Agenda` (`max_values`: None, `max_size`: Some(2467858), added: 2470333, mode: `MaxEncodedLen`)
	/// Storage: `Timelock::Lookup` (r:0 w:1)
	/// Proof: `Timelock::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 511]`.
	fn schedule_sealed(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87 + s * (4119 ±0)`
		//  Estimated: `2471323`
		// Minimum execution time: 30_367_000 picoseconds.
		Weight::from_parts(31_129_000, 0)
			.saturating_add(Weight::from_parts(0, 2471323))
			// Standard Error: 29_886
			.saturating_add(Weight::from_parts(13_509_378, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Timelock::Agenda` (r:1 w:1)
	/// Proof: `Timelock::Agenda` (`max_values`: None, `max_size`: Some(2467858), added: 2470333, mode: `MaxEncodedLen`)
	/// Storage: `Timelock::Lookup` (r:0 w:512)
	/// Proof: `Timelock::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[0, 512]`.
	fn service_agenda(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `87 + s * (200 ±0)`
		//  Estimated: `2471323`
		// Minimum execution time: 6_764_000 picoseconds.
		Weight::from_parts(6_874_000, 0)
			.saturating_add(Weight::from_parts(0, 2471323))
			// Standard Error: 8_159
			.saturating_add(Weight::from_parts(9_218_337, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
	}
	/// Storage: `Timelock::Lookup` (r:0 w:1)
	/// Proof: `Timelock::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn service_task_base() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_780_000 picoseconds.
		Weight::from_parts(3_938_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Preimage::PreimageFor` (r:1 w:0)
	/// Proof: `Preimage::PreimageFor` (`max_values`: None, `max_size`: Some(4194344), added: 4196819, mode: `Measured`)
	/// Storage: `Timelock::Lookup` (r:0 w:1)
	/// Proof: `Timelock::Lookup` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[128, 4194304]`.
	fn service_task_fetched(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `111 + s * (1 ±0)`
		//  Estimated: `3576 + s * (1 ±0)`
		// Minimum execution time: 11_883_000 picoseconds.
		Weight::from_parts(12_167_000, 0)
			.saturating_add(Weight::from_parts(0, 3576))
			// Standard Error: 618
			.saturating_add(Weight::from_parts(59_765, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(s.into()))
	}
	fn execute_dispatch_signed() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_572_000 picoseconds.
		Weight::from_parts(4_818_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}
