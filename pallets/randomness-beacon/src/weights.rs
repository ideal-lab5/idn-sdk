
//! Autogenerated weights for `pallet_randomness_beacon`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.0.0
//! DATE: 2025-03-14, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-RN9BJOQ`, CPU: `Intel(R) Core(TM) i7-9700KF CPU @ 3.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ./target/release/wbuild/solochain-template-runtime/solochain_template_runtime.compact.compressed.wasm
// --pallet
// pallet_randomness_beacon
// --extrinsic
// 
// --output
// ../../pallets/randomness-beacon/generated_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

pub trait WeightInfo {
	fn try_submit_asig() -> Weight;
	fn on_finalize() -> Weight;
}

/// Weight functions for `pallet_randomness_beacon`.
pub struct SubstrateWeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeightInfo<T> {
	/// Storage: `RandBeacon::DidUpdate` (r:1 w:1)
	/// Proof: `RandBeacon::DidUpdate` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::GenesisRound` (r:1 w:1)
	/// Proof: `RandBeacon::GenesisRound` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::LatestRound` (r:1 w:1)
	/// Proof: `RandBeacon::LatestRound` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `RandBeacon::AggregatedSignature` (r:1 w:1)
	/// Proof: `RandBeacon::AggregatedSignature` (`max_values`: Some(1), `max_size`: Some(98), added: 593, mode: `MaxEncodedLen`)
	fn try_submit_asig() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `6`
		//  Estimated: `1583`
		// Minimum execution time: 20_032_581_000 picoseconds.
		Weight::from_parts(20_401_602_000, 0)
			.saturating_add(Weight::from_parts(0, 1583))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	fn on_finalize() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `117`
		//  Estimated: `0`
		// Minimum execution time: 8_360_000 picoseconds.
		Weight::from_parts(9_102_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// The range of component `x` is `[0, 1]`.
	fn try_submit_asig() -> Weight {
		Weight::from_parts(20_042_365_000, 0)
	}
	fn on_finalize() -> Weight {
		Weight::from_parts(20_042_365_000, 0)
	}
}