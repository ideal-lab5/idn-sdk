/*
 * Copyright 2025 by Ideal Labs, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


//! Autogenerated weights for `pallet_idn_manager`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-12, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-3.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ../../../target/release/wbuild/idn-sdk-kitchensink-runtime/idn_sdk_kitchensink_runtime.compact.compressed.wasm
// --pallet
// pallet-idn-manager
// --extrinsic
// 
// --template
// ./weight-template.hbs
// --output
// ../../../pallets/idn-manager/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_idn_manager`.
pub trait WeightInfo {
	fn create_subscription(l: u32, ) -> Weight;
	fn pause_subscription() -> Weight;
	fn kill_subscription() -> Weight;
	fn update_subscription(l: u32, m: u32, ) -> Weight;
	fn reactivate_subscription() -> Weight;
	fn quote_subscription(l: u32, ) -> Weight;
	fn get_subscription_info() -> Weight;
	fn dispatch_pulse(p: u32, s: u32, ) -> Weight;
	fn on_finalize(s: u32, ) -> Weight;
}

/// Weights for `pallet_idn_manager` using the IDN SDK Kitchensink Runtime and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 100]`.
	fn create_subscription(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `9128`
		// Minimum execution time: 87_000_000 picoseconds.
		Weight::from_parts(88_069_592, 9128)
			// Standard Error: 1_121
			.saturating_add(Weight::from_parts(70_807, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	fn pause_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `9128`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 9128)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn kill_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `302`
		//  Estimated: `9128`
		// Minimum execution time: 76_000_000 picoseconds.
		Weight::from_parts(78_000_000, 9128)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 100]`.
	/// The range of component `m` is `[0, 8]`.
	fn update_subscription(l: u32, _m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `302`
		//  Estimated: `9128`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(56_057_325, 9128)
			// Standard Error: 625
			.saturating_add(Weight::from_parts(59_604, 0).saturating_mul(l.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	fn reactivate_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `9128`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 9128)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `l` is `[0, 100]`.
	fn quote_subscription(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_220_559, 0)
			// Standard Error: 542
			.saturating_add(Weight::from_parts(29_592, 0).saturating_mul(l.into()))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:0)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	fn get_subscription_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `9128`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_000_000, 9128)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1000 w:999)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 100]`.
	/// The range of component `s` is `[1, 1000]`.
	fn dispatch_pulse(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + p * (9002 ±0) + s * (1060 ±0)`
		//  Estimated: `9128 + s * (8138 ±0)`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(57_000_000, 9128)
			// Standard Error: 519_506
			.saturating_add(Weight::from_parts(5_088_449, 0).saturating_mul(p.into()))
			// Standard Error: 51_847
			.saturating_add(Weight::from_parts(43_990_392, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 8138).saturating_mul(s.into()))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1000 w:999)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 1000]`.
	fn on_finalize(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172 + s * (158 ±0)`
		//  Estimated: `9128 + s * (8138 ±0)`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(47_000_000, 9128)
			// Standard Error: 34_062
			.saturating_add(Weight::from_parts(36_889_922, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(T::DbWeight::get().writes(2_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 8138).saturating_mul(s.into()))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 100]`.
	fn create_subscription(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `42`
		//  Estimated: `9128`
		// Minimum execution time: 87_000_000 picoseconds.
		Weight::from_parts(88_069_592, 9128)
			// Standard Error: 1_121
			.saturating_add(Weight::from_parts(70_807, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	fn pause_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `9128`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 9128)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	fn kill_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `302`
		//  Estimated: `9128`
		// Minimum execution time: 76_000_000 picoseconds.
		Weight::from_parts(78_000_000, 9128)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// The range of component `l` is `[0, 100]`.
	/// The range of component `m` is `[0, 8]`.
	fn update_subscription(l: u32, _m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `302`
		//  Estimated: `9128`
		// Minimum execution time: 55_000_000 picoseconds.
		Weight::from_parts(56_057_325, 9128)
			// Standard Error: 625
			.saturating_add(Weight::from_parts(59_604, 0).saturating_mul(l.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:1)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	fn reactivate_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `9128`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_000_000, 9128)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// The range of component `l` is `[0, 100]`.
	fn quote_subscription(l: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 8_000_000 picoseconds.
		Weight::from_parts(8_220_559, 0)
			// Standard Error: 542
			.saturating_add(Weight::from_parts(29_592, 0).saturating_mul(l.into()))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1 w:0)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	fn get_subscription_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `244`
		//  Estimated: `9128`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(15_000_000, 9128)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1000 w:999)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// The range of component `p` is `[0, 100]`.
	/// The range of component `s` is `[1, 1000]`.
	fn dispatch_pulse(p: u32, s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0 + p * (9002 ±0) + s * (1060 ±0)`
		//  Estimated: `9128 + s * (8138 ±0)`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(57_000_000, 9128)
			// Standard Error: 519_506
			.saturating_add(Weight::from_parts(5_088_449, 0).saturating_mul(p.into()))
			// Standard Error: 51_847
			.saturating_add(Weight::from_parts(43_990_392, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 8138).saturating_mul(s.into()))
	}
	/// Storage: `IdnManager::Subscriptions` (r:1000 w:999)
	/// Proof: `IdnManager::Subscriptions` (`max_values`: None, `max_size`: Some(5663), added: 8138, mode: `MaxEncodedLen`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `IdnManager::SubCounter` (r:1 w:1)
	/// Proof: `IdnManager::SubCounter` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// The range of component `s` is `[1, 1000]`.
	fn on_finalize(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `172 + s * (158 ±0)`
		//  Estimated: `9128 + s * (8138 ±0)`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(47_000_000, 9128)
			// Standard Error: 34_062
			.saturating_add(Weight::from_parts(36_889_922, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(s.into())))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(s.into())))
			.saturating_add(Weight::from_parts(0, 8138).saturating_mul(s.into()))
	}
}