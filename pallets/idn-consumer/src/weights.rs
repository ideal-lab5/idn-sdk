/*
 * Copyright 2025 by Ideal Labs, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


//! Autogenerated weights for `pallet_idn_consumer`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 47.0.0
//! DATE: 2025-05-13, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `DESKTOP-RN9BJOQ`, CPU: `Intel(R) Core(TM) i7-9700KF CPU @ 3.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// frame-omni-bencher
// v1
// benchmark
// pallet
// --runtime
// ../../../target/release/wbuild/idn-sdk-kitchensink-runtime/idn_sdk_kitchensink_runtime.compact.compressed.wasm
// --pallet
// pallet-idn-consumer
// --extrinsic
// 
// --template
// ./weight-template.hbs
// --output
// ../../../pallets/idn-consumer/src/_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]
#![allow(dead_code)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_idn_consumer`.
pub trait WeightInfo {
	fn consume_pulse() -> Weight;
	fn consume_quote() -> Weight;
	fn consume_sub_info() -> Weight;
	fn create_subscription() -> Weight;
	fn pause_subscription() -> Weight;
	fn kill_subscription() -> Weight;
	fn update_subscription() -> Weight;
	fn reactivate_subscription() -> Weight;
	fn request_quote() -> Weight;
	fn request_sub_info() -> Weight;
}

/// Weights for `pallet_idn_consumer` using the IDN SDK Kitchensink Runtime and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn consume_pulse() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 39_559_000 picoseconds.
		Weight::from_parts(40_713_000, 0)
	}
	fn consume_quote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 35_420_000 picoseconds.
		Weight::from_parts(41_195_000, 0)
	}
	fn consume_sub_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 44_756_000 picoseconds.
		Weight::from_parts(46_488_000, 0)
	}
	fn create_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_235_000 picoseconds.
		Weight::from_parts(4_428_000, 0)
	}
	fn pause_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_021_000 picoseconds.
		Weight::from_parts(2_213_000, 0)
	}
	fn kill_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_021_000 picoseconds.
		Weight::from_parts(2_213_000, 0)
	}
	fn update_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_214_000 picoseconds.
		Weight::from_parts(2_406_000, 0)
	}
	fn reactivate_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_021_000 picoseconds.
		Weight::from_parts(2_118_000, 0)
	}
	fn request_quote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_235_000 picoseconds.
		Weight::from_parts(4_523_000, 0)
	}
	fn request_sub_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_753_000 picoseconds.
		Weight::from_parts(3_946_000, 0)
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	fn consume_pulse() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 39_559_000 picoseconds.
		Weight::from_parts(40_713_000, 0)
	}
	fn consume_quote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 35_420_000 picoseconds.
		Weight::from_parts(41_195_000, 0)
	}
	fn consume_sub_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 44_756_000 picoseconds.
		Weight::from_parts(46_488_000, 0)
	}
	fn create_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_235_000 picoseconds.
		Weight::from_parts(4_428_000, 0)
	}
	fn pause_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_021_000 picoseconds.
		Weight::from_parts(2_213_000, 0)
	}
	fn kill_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_021_000 picoseconds.
		Weight::from_parts(2_213_000, 0)
	}
	fn update_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_214_000 picoseconds.
		Weight::from_parts(2_406_000, 0)
	}
	fn reactivate_subscription() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_021_000 picoseconds.
		Weight::from_parts(2_118_000, 0)
	}
	fn request_quote() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_235_000 picoseconds.
		Weight::from_parts(4_523_000, 0)
	}
	fn request_sub_info() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_753_000 picoseconds.
		Weight::from_parts(3_946_000, 0)
	}
}